<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.maxm</groupId>
  <artifactId>account-parent</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>account-parent</name>
  <url>https://github.com/mxiongmiao/account-parent</url>
  <description>root pom of account project</description>
  
  <scm>
      <connection>scm:git:git://github.com/mxiongmiao/account-parent.git</connection>
      <developerConnection>scm:git:git@github.com:mxiongmiao/account-parent.git</developerConnection>
      <url>https://github.com/mxiongmiao/account-parent</url>
  </scm>
  
  <inceptionYear>2013</inceptionYear>
  <developers>
    <developer>
        <id>mxiongmiao</id>
        <name>mxiongmiao</name>
        <email>mxiongmiao@gmail.com</email>
    </developer>
  </developers>
  <mailingLists>
  	<mailingList>
  		<name>mxiongmiao</name>
  		<post>mxiongmiao@gmail.com</post>
  	</mailingList>
  </mailingLists>
  <prerequisites>
  	<maven>2.2.1</maven>
  </prerequisites>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.surefire.version>2.5</maven.surefire.version>
  	<maven.compiler.source.version>1.6</maven.compiler.source.version>
  	<maven.compiler.target.version>1.6</maven.compiler.target.version>
  	<maven.compiler.plugin.version>2.2</maven.compiler.plugin.version>
  	<maven.source.plugin>2.2.1</maven.source.plugin>
  	<maven.resource.version>2.4</maven.resource.version>
  	<junit.version>4.11</junit.version>
  	<spring.version>2.5.6</spring.version>
  	<spring-webmvc.version>2.5.6</spring-webmvc.version>
  	<javax.servlet.servlet-api.version>2.5</javax.servlet.servlet-api.version>
  	<javax.servlet.jsp.jsp-api.version>2.2</javax.servlet.jsp.jsp-api.version>
  	<javax.servlet.jstl.version>1.2</javax.servlet.jstl.version>
  	<org.apache.ibatis.ibatis-sqlmap.version>2.3.4.726</org.apache.ibatis.ibatis-sqlmap.version>
  	<mysql-connector-java.version>5.1.22</mysql-connector-java.version>
  	<commons-dbcp.version>1.4</commons-dbcp.version>
  	<!-- jetty -->
  	<maven-jetty-plugin.version>6.1.25</maven-jetty-plugin.version>
  	<commons-lang3.version>3.1</commons-lang3.version>
  	<httpclient.version>4.1</httpclient.version>
  	
  	<checkstyle.version>2.9.1</checkstyle.version>
  	<maven.pmd.version>2.7.1</maven.pmd.version>
  	<findbugs.maven.version>2.4.0</findbugs.maven.version>
  </properties>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven.surefire.version}</version>
					<executions>
						<execution>
							<id>run-integration-test</id>
							<phase>integration-test</phase>
							<goals>
								<goal>test</goal>
							</goals>
							<configuration>
								<includes>
									<include>**/*IT.java</include>
								</includes>
							</configuration>
						</execution>
					</executions>
					<configuration>
						<skipTests>false</skipTests>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven.compiler.plugin.version}</version>
					<configuration>
						<source>${maven.compiler.source.version}</source>
						<target>${maven.compiler.target.version}</target>
						<encoding>${project.build.sourceEncoding}</encoding> 
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>${maven.resource.version}</version>
					<configuration>
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>${maven.source.plugin}</version>
					<!-- Multiple specifications of a set of goals to execute during the 
 build lifecycle, each having (possibly) different configuration. -->
					<executions>
						<execution>
							<id>attach-sources</id>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>maven-jetty-plugin</artifactId>
					<version>${maven-jetty-plugin.version}</version>
					<configuration>
						<webAppConfig>
							<contextPath>/${project.build.finalName}</contextPath>
						</webAppConfig>
						<connectors>
							<connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
								<port>8080</port>
								<maxIdleTime>60000</maxIdleTime>
							</connector>
						</connectors>
						<stopPort>9966</stopPort>
						<stopKey>stop-jetty-for-integration-test</stopKey>
					</configuration>
					<executions>
						<execution>
							<!-- 在集成测试前 启动jetty容器(by exe mvn:run) -->
							<id>start-jetty</id>
							<phase>pre-integration-test</phase>
							<goals>
								<!-- mvn jetty:run -->
								<goal>run</goal>
							</goals>
							<configuration>
								<daemon>true</daemon>
							</configuration>
						</execution>
						<execution>
							<!-- 集成测试之后关闭容器 -->
							<id>stop-jetty</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>stop</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
		<resources>
			<resource>
				<!-- Describe the directory where the resources are stored. The path 
 is relative to the POM. -->
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>applicationContext.xml</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<!-- Whether resources are filtered to replace tokens with 
 parameterised values or not. The values are taken from the 
 properties element and from the properties in the files listed in 
 the filters element. -->
				<filtering>true</filtering>
				<includes>
					<include>applicationContext.xml</include>
				</includes>
			</resource>
		</resources>
		<!-- we don't need testResources here, we can switch env with profile for test and others. 
		and use the same resources in all envs, do like this: diff profiles determin diff datasources and others.
		-->
		<testResources>
			<testResource>
				<!-- 其他资源测试和正式环境共享 -->
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<!-- 测试有自己的数据库配置(profile 是一种更好的机制) -->
					<exclude>**/*jdbc*.properties</exclude>
				</excludes>
			</testResource>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>false</filtering>
			</testResource>
		</testResources>
	</build>
	<reporting>
		<plugins>
			<plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-checkstyle-plugin</artifactId>
         <version>${checkstyle.version}</version>
         <configuration>
           <configLocation>${basedir}/checkstyle.xml</configLocation>
           <enableRulesSummary>false</enableRulesSummary>
         </configuration>
       </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-pmd-plugin</artifactId>
         <version>${maven.pmd.version}</version>
         <configuration>
           <rulesets>
             <ruleset>checkstyle.xml</ruleset>
           </rulesets>
           <targetJdk>${maven.compiler.target.version}</targetJdk>
         </configuration>
       </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <version>${findbugs.maven.version}</version>
        <configuration>
          <threshold>Normal</threshold>
          <effort>Default</effort>
       </configuration>
      </plugin>
		</plugins>
	</reporting>
	
	<!-- 
		  *dependencyManagement 不会给当前项目和子项目引入实际的依赖， 不过却可以被子项目继承，
		  *一般惯用做法是父pom中定义好每个依赖的完整信息，子项目只需通过groupId 和 artifactId继承父pom中的定义，
		  *这样做的好处是统一了所有的版本， 同时一定程度上减少了子项目的配置。
	-->
  <dependencyManagement>
    <dependencies>
	    <dependency>
	      <groupId>junit</groupId>
	      <artifactId>junit</artifactId>
	      <version>${junit.version}</version>
	      <scope>test</scope>
	    </dependency>
	    <dependency>
			 <groupId>org.springframework</groupId>
			 <artifactId>spring</artifactId>
			 <version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${spring-webmvc.version}</version>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
				<version>${javax.servlet.servlet-api.version}</version>
				<!-- provided 指明使用容器提供的 -->
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet.jsp</groupId>
				<artifactId>jsp-api</artifactId>
				<version>${javax.servlet.jsp.jsp-api.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jstl</artifactId>
				<version>${javax.servlet.jstl.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.ibatis</groupId>
				<artifactId>ibatis-sqlmap</artifactId>
				<version>${org.apache.ibatis.ibatis-sqlmap.version}</version>
			</dependency>
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>${mysql-connector-java.version}</version>
			</dependency>
			<dependency>
	      <groupId>commons-dbcp</groupId>
	      <artifactId>commons-dbcp</artifactId>
	      <version>${commons-dbcp.version}</version>
	    </dependency>
	    <dependency>
	    	<groupId>org.apache.commons</groupId>
			  <artifactId>commons-lang3</artifactId>
			  <version>${commons-lang3.version}</version>
	    </dependency>
			<dependency>
			  <groupId>org.apache.httpcomponents</groupId>
			  <artifactId>httpclient</artifactId>
			  <version>${httpclient.version}</version>
			</dependency>
	  </dependencies>
  </dependencyManagement>
  
  <!-- The lists of the remote repositories for discovering 
 dependencies and extensions. note:where to download dependencies && extensions from-->
  <repositories>
  	<repository>
  		<!-- A unique identifier for a repository. This is used to match the 
 repository to configuration in the settings.xml file -->
  		<id>nexus</id>
  		<name>private nexus repository</name>
  		<url>http://192.168.152.10:8081/nexus/content/groups/public</url>
  	</repository>
  </repositories>
  <!-- The lists of the remote repositories for discovering plugins for 
 builds and reports. note:where to download plugins and reports-->
  <pluginRepositories>
  	<pluginRepository>
  		<id>nexus</id>
  		<name>private nexus repository</name>
  		<url>http://192.168.152.10:8081/nexus/content/groups/public</url>
  	</pluginRepository>
  </pluginRepositories>
  
  <distributionManagement>
  	<!-- Where to deploy snapshots of artifacts to. If not given, it 
 defaults to the repository element. -->
  	<snapshotRepository>
  		<!-- A unique identifier for a repository. This is used to match the 
 repository to configuration in the settings.xml file, for example. -->
  		<id>nexus-snapshots</id>
  		<url>http://192.168.152.10:8081/nexus/content/repositories/snapshots/</url>
  	</snapshotRepository>
  </distributionManagement>
</project>
